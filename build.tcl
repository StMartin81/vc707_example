#*****************************************************************************************
# Vivado (TM) v2018.1_AR70908 (64-bit)
#
# build.tcl: Tcl script for re-creating project 'project_1'
#
# Generated by Vivado on Wed May 15 09:07:10 +0200 2019
# IP Build 2185939 on Wed Apr  4 20:55:05 MDT 2018
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (build.tcl) that was generated.
#
#*****************************************************************************************

set origin_dir "[file dirname [info script]]"
source "$origin_dir/settings.tcl"

variable script_file
set script_file "build.tcl"

# Help information for this script
proc help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--help"         { help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Create project
create_project ${vivado_project_name} $origin_dir/${vivado_project_name} -part xc7vx485tffg1761-2

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Reconstruct message rules
# None

# Set project properties
set_property -name "board_part" -value "xilinx.com:vc707:part0:1.3" -objects [current_project]
set_property -name "default_lib" -value "xil_defaultlib" -objects [current_project]
set_property -name "ip_cache_permissions" -value "read write" -objects [current_project]
set_property -name "ip_output_repo" -value "$proj_dir/${vivado_project_name}.cache/ip" -objects [current_project]
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects [current_project]
set_property -name "simulator_language" -value "Mixed" -objects [current_project]
set_property -name "source_mgmt_mode" -value "DisplayOnly" -objects [current_project]
set_property -name "target_language" -value "VHDL" -objects [current_project]
set_property -name "xpm_libraries" -value "XPM_CDC XPM_FIFO XPM_MEMORY" -objects [current_project]

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set_property "ip_repo_paths" "[file normalize "$origin_dir/ip_cores"]" [get_filesets sources_1]

# Rebuild user ip_cores's index before adding any source files
update_ip_catalog -rebuild

# Create block design
source $origin_dir/vc707_bd.tcl

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset properties
set constraint_file "[file normalize $origin_dir/vc707.xdc]"
add_files -fileset constrs_1 -norecurse $constraint_file

# needed so that all signal widths are propagated correctly
validate_bd_design -force -quiet

# Generate the wrapper
make_wrapper -fileset [get_filesets sources_1] -files [get_files design_1.bd] -top
set bd_path [file dirname [get_files design_1.bd]]
add_files -norecurse $bd_path/hdl/design_1_wrapper.vhd
set_property top design_1_wrapper [get_filesets sources_1]

regenerate_bd_layout

save_bd_design

set_property AUTO_INCREMENTAL_CHECKPOINT 1 [get_runs synth_1]
set_property AUTO_INCREMENTAL_CHECKPOINT 1 [get_runs impl_1]

# set bootloader_elf "$origin_dir//sdk/bootloader/elf/bootloader.elf"
# add_files -norecurse "$bootloader_elf"
# set_property used_in_simulation 0 [get_files "$bootloader_elf"]
# set_property SCOPED_TO_REF "" [get_files -all -of_objects [get_fileset sources_1] "$bootloader_elf"]
# set_property SCOPED_TO_CELLS { } [get_files -all -of_objects [get_fileset sources_1] "$bootloader_elf"]
# set_property SCOPED_TO_REF design_1 [get_files -all -of_objects [get_fileset sources_1] "$bootloader_elf"]
# set_property SCOPED_TO_CELLS { microblaze_processor_system/microblaze_processor } [get_files -all -of_objects [get_fileset sources_1] "$bootloader_elf"]

puts "INFO: Project created:${vivado_project_name}"
